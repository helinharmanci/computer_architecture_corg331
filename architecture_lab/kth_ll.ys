#Helin Ayça Harmancı - 2448470

# Execution begins at address 0 
.pos 0
	irmovq Stack, %rsp  	# Set up stack pointer
	irmovq ele0, %rdi	#put the linkedlist to rdi
	irmovq $5,%rsi
	call kth_ll		# Execute kth_ll program
	halt			# Terminate program 

.pos 0x200
ele0:
	.quad 0x0005
	.quad ele1
ele1:
	.quad 0x000c
	.quad ele2
ele2:
	.quad 0x0010
	.quad ele3
ele3:
	.quad 0x001a
	.quad ele4
ele4:
	.quad 0x0030
	.quad ele5
ele5:
	.quad 0x0045
	.quad ele6
ele6:
	.quad 0x005e
	.quad 0 # Remember that 0 is null.
	
# long sum(long *head, long count)
# head in %rdi, count in %rsi
kth_ll:
	xorq %rax, %rax		#long kth = 0;
	irmovq $1,%r10		#k-1 yapmak icin
	irmovq $0,%r11		#k ile 0i karsilastirmak icin
	jmp test

loop:	
	mrmovq (%rdi), %r8	#kth elemani r8e atiyorum
	subq %r10, %rsi		#k--
	rrmovq %rsi, %r9	#copy k to r9 to compare the k and 0
	subq %r11, %r9		#kth-k==0
	je break_loop
	mrmovq 8(%rdi), %rdi

test:
	andq %rdi, %rdi		#head=?=NULL
	jne loop		#head null degilse loopa gir
	ret			#nullsa raxı returnle


break_loop:
	rrmovq %r8, %rax	#kth=head->value0
	ret
	

# Stack starts here and grows to lower addresses
.pos 0x800
Stack:










